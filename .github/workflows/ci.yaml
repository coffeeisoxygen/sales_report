# .github/workflows/ci.yml - Thorough Quality Gates
name: Comprehensive CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  # ========================================
  # 1. FAST QUALITY CHECKS
  # ========================================
  quality-check:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv sync --dev
          uv run pre-commit install

      - name: Run pre-commit on all files
        run: uv run pre-commit run --all-files

  # ========================================
  # 2. TYPE CHECKING (Comprehensive)
  # ========================================
  type-check:
    runs-on: windows-latest
    needs: quality-check
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Type check with Pyright
        run: |
          uv sync --dev
          uv add --dev pyright
          uv run pyright src/

      - name: Type check with MyPy (backup)
        run: |
          uv add --dev mypy
          uv run mypy src/ --strict --ignore-missing-imports

  # ========================================
  # 3. SECURITY AUDITS (Comprehensive)
  # ========================================
  security-audit:
    runs-on: windows-latest
    needs: quality-check
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for gitleaks

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Security scan - Bandit
        run: |
          uv sync --dev
          uv add --dev bandit[toml]
          mkdir -p .reports
          uv run bandit -r src/ -f json -o .reports/bandit.json

      - name: Security scan - Safety
        run: |
          uv add --dev safety
          uv run safety check --json --output .reports/safety.json

      - name: Secrets scan - Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: .reports/

  # ========================================
  # 4. TESTING SUITE
  # ========================================
  test:
    runs-on: windows-latest
    needs: quality-check
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Run tests
        run: |
          uv sync --dev
          uv run pytest tests/ -v \
            --cov=src/sales_dashboard \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=80

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml

  # ========================================
  # 5. ETL PERFORMANCE TESTS
  # ========================================
  performance-test:
    runs-on: windows-latest
    needs: [quality-check, test]
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: ETL Performance Tests
        run: |
          uv sync --dev
          uv add --dev memory-profiler
          # Test CSV processing performance
          uv run python -m pytest tests/performance/ -v \
            --benchmark-only \
            --benchmark-json=.reports/benchmark.json

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: .reports/

  # ========================================
  # 6. APPLICATION SMOKE TEST
  # ========================================
  smoke-test:
    runs-on: windows-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Test application startup
        run: |
          uv sync
          # Test that Streamlit app starts without errors
          timeout 30 uv run streamlit run src/sales_dashboard/home.py \
            --server.headless true \
            --server.port 8502 \
            --server.runOnSave false || echo "Startup test completed"

  # ========================================
  # 7. BUILD VALIDATION
  # ========================================
  build-test:
    runs-on: windows-latest
    needs: [test, type-check, security-audit]
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Build package
        run: |
          uv build
          # Test installation
          uv pip install dist/*.whl --force-reinstall

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
