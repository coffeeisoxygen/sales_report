[project]
name = "sales-report"
dynamic = ["version"]
description = "Sales Report Dashboard - ETL and Analytics Tool"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "matplotlib>=3.10.3",
    "numpy>=2.2.6",
    "pandas>=2.3.0",
    "streamlit>=1.45.1",
]

[project.urls]
Homepage = "https://github.com/coffeeisoxygen/sales_report"

[build-system]
requires = ["setuptools", "setuptools-scm", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = { find = { where = ["."], include = ["src*"] } }

[tool.setuptools_scm]
write_to = "src/_version.py"
version_scheme = "guess-next-dev"
local_scheme = "no-local-version"
fallback_version = "0.1.0"

[dependency-groups]
dev = [
    "pytest>=8.4.0",
    "pytest-cov>=6.1.1",
    "pytest-html>=4.1.1",
    "pytest-mock>=3.14.1",
]

# coverage and pytest
[tool.coverage.run]
source = ["src"]
data_file = ".reports/coverage/.coverage"
omit = [
    "*/tests/*",
    "*/_version.py",
    "*/scripts/*",
    "*/__init__.py",
    "*/site-packages/*",
    "*/.venv/*",
    "*/shibokensupport/*",
    "*/pyscript/*",
    "*/signature_bootstrap.py",
    "src/__init__.py",          # âœ… Exclude init files
    "src/_version.py",          # âœ… Exclude version file
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_covered = false
skip_empty = true

[tool.coverage.html]
directory = ".reports/coverage/html"
skip_covered = false
skip_empty = true

# ==========================================
# ðŸ§ª PYTEST CONFIGURATION - ENHANCED
# ==========================================

[tool.pytest.ini_options]
testpaths = ["tests"] # Only scan tests directory
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=src/",
    "--cov-report=html:.reports/coverage",
    "--cov-report=term-missing",
    "--html=.reports/tests/report.html",
    "--self-contained-html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "config: Configuration system tests",
    "path_resolver: Path resolution tests",
    "settings: Settings management tests",
    "temp_files: Tests involving temporary files",
    "windows_paths: Windows-specific path tests",
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# âœ… Enhanced logging with colors
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_auto_indent = true


# âœ… Test environment
env = [
    "TESTING = 1",
    "DASHBOARD_ENV = test",
    "DASHBOARD_APP__DEBUG_MODE = true",
    "DASHBOARD_LOGGING__LEVEL = DEBUG",
]

# âœ… Minimum version requirements
minversion = "8.0"

# âœ… Test discovery options
norecursedirs = [
    ".*",
    "build",
    "dist",
    "*.egg",
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    ".pytest_cache",
    ".reports",
]

# # âœ… Timeout for long-running tests
# timeout = 300 # 5 minutes max per test

# âœ… Parallel execution (when pytest-xdist is available)
# addopts = [..., "-n", "auto"]  # Uncomment to enable parallel tests

# Linter And Fromatter
# [tool.ruff]
# target-version = "py312"
# line-length = 88
# indent-width = 4
# respect-gitignore = true
# extend-exclude = [
#     "__pycache__",
#     ".git",
#     ".venv",
#     "venv",
#     "build",
#     "dist",
#     "*.egg-info",
#     ".pytest_cache",
#     ".ruff_cache",
#     "src/sales_dashboard/_version.py", # Generated file only
# ]

# [tool.ruff.lint]
# fixable = ["ALL"]
# unfixable = []
# select = [
#     "F",     # Pyflakes (error detection)
#     "E",     # pycodestyle errors
#     "W",     # pycodestyle warnings
#     "I",     # isort (import sorting)
#     "B",     # flake8-bugbear (common bugs + security)
#     "C",     # flake8-comprehensions
#     "Q",     # flake8-quotes
#     "UP",    # pyupgrade (modern Python security)
#     "S",     # flake8-bandit (security) âœ… Enhanced
#     "N",     # pep8-naming
#     "RUF",   # ruff-specific rules
#     "D",     # pydocstyle
#     "ASYNC", # Async security issues
#     "LOG",   # Logging security
#     "PTH",   # Path traversal security
#     "ARG",   # Argument validation
#     "PLR",   # Pylint rules
#     "T",     # Type checking
#     "PERF",  # âœ… Performance optimizations
#     "FURB",  # âœ… Modern Python idioms
#     "FA",    # âœ… Future annotations
# ]

# ignore = [
#     "E501",    # Line too long (handled by formatter)
#     "S101",    # Use of assert (needed in tests)
#     "B008",    # Function calls in argument defaults
#     "D100",    # Missing docstring in public module
#     "D101",    # Missing docstring in public class
#     "D102",    # Missing docstring in public method
#     "D103",    # Missing docstring in public function
#     "D104",    # Missing docstring in public package
#     "D105",    # Missing docstring in magic method
#     "D107",    # Missing docstring in __init__
#     "D401",    # First line should be in imperative mood
#     "D203",    # 1 blank line required before class docstring (conflicts with D211)
#     "D213",    # Multi-line docstring summary should start at the second line (conflicts with D212)
#     "N803",    # Argument name should be lowercase
#     "N806",    # Variable in function should be lowercase
#     "S603",    # subprocess-shell-use
#     "T201",    # print() statements (allow in scripts)
#     "PLR2004", # Magic value used in comparison
#     "S101",    # assert (OK in tests)
#     "S603",    # subprocess (controlled usage for GSM)
#     "S607",    # partial executable path (OK for automation)
#     "S108",    # hardcoded temp file (OK in controlled env)
#     "PLR0913", # Too many arguments (OK for ETL functions)
#     "C901",    # Complex functions (OK for data transformation)
#     "D415",    # Missing docstring in module (OK for __init__.py)
#     "D416",    # Missing docstring in class (OK for __init__.py)
#     "PLR6301", # Method could be a function (OK for test classes)
# ]
# [tool.ruff.lint.per-file-ignores]
# "tests/**/*.py" = [
#     "Q000",    # Allow single quotes in tests
#     "S101",    # Assert usage OK in tests
#     "D",       # Docstrings not required in all test functions
#     "UP038",   # Consistent tuple syntax in tests
#     "S106",    # Hardcoded password OK in test fixtures
#     "PLR6301", # Method could be a function (OK in test classes)
#     "PLR2004", # Magic values in tests (OK for test data)
#     "ARG001",  # Unused function arguments (fixtures)
#     "ARG002",  # Unused method arguments (test methods)
#     "PLR0913", # Too many arguments (OK for test setup)
#     "PLR0915", # Too many statements (OK for complex test scenarios)
#     "C901",    # Too complex (OK for comprehensive tests)
#     "T201",    # Print statements (OK for debugging tests)
#     "B008",    # Function calls in defaults (OK for test fixtures)
#     "S101",    # Assert usage OK in tests
# ]
# "scripts/**/*.py" = [
#     "T201",    # print() statements OK in scripts
#     "D",       # Docstrings not required in scripts
#     "ARG001",  # Unused function arguments (fixtures)
#     "PLR2004", # Magic values in tests
#     "S603",    # subprocess for build scripts
#     "S607",    # partial paths for tools
# ]
# "src/sales_dashboard/__init__.py" = ["D104"] # Package docstring
# "src/sales_dashboard/_version.py" = ["ALL"]
# "src/sales_dashboard/__main__.py" = ["T201"] # Allow prints in main entry

# # âœ… Add docstring configuration to prevent conflicts
[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
known-first-party = ["src"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
split-on-trailing-comma = true
force-sort-within-sections = true

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60
# Type checking we use pyright / mypy
# but vscode already uses pylance + pyright as default
# so we don't need to run it again
